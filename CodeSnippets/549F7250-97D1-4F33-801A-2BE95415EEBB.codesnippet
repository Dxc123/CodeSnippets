<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>initCustomAlertView(Swift)</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>import UIKit
import SnapKit
let containerH: CGFloat = 300.0
let containerW: CGFloat = 280.0
//显示与消失类型
enum showType {
    case center//中间显示（消失也是）
    case bottom//底部显示（消失也是）
}
class CJKTRechargeAlertView: UIView {
   private lazy  var  containerView: UIView = {
        let view = UIView.init()
        view.backgroundColor = UIColor.white
        view.layer.cornerRadius = 10
        view.layer.masksToBounds = true
        return view
    }()
   open var containerShowType: showType?
   open lazy var nickNameLabel: UILabel = {
        let nl = UILabel.init()
        nl.text = "UILabel"
        nl.textColor = UIColor.gray
        nl.font = UIFont.systemFont(ofSize: 16)
        nl.textAlignment = .center
        nl.numberOfLines = 0
        return nl
    }()

//    override init(frame: CGRect) {
//        super.init(frame: UIScreen.main.bounds)
//        self.backgroundColor = UIColor.black.withAlphaComponent(0.5);
//        setupUI()
//    }
   //传入参数的 init方法（自定义构造函数）
   public init(showType: showType){
        self.containerShowType = showType
        super.init(frame:  UIScreen.main.bounds)
        self.backgroundColor = UIColor.black.withAlphaComponent(0.5);
        setupUI()
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
   private func setupUI(){
    let tap = UITapGestureRecognizer.init(target: self, action: #selector(tapACtion))
    tap.delegate = self
    self.addGestureRecognizer(tap)
    //containerView
    if self.containerShowType == .center  {
         containerView.frame = CGRect.init(x: (SCREEN_WIDTH-containerW)/2, y: (SCREEN_HEIGHT-containerH)/2, width: containerW, height: containerH)
    }else if self.containerShowType == .bottom {
         containerView.frame = CGRect.init(x: 0, y: SCREEN_HEIGHT, width: SCREEN_WIDTH, height: containerH)
    }
    
     
    self.addSubview(containerView)
        //nickNameLabel
        containerView.addSubview(nickNameLabel)
        nickNameLabel.snp.makeConstraints({ (make) in
        make.leading.equalTo(containerView.snp.leading).offset(50)
        make.trailing.equalTo(containerView.snp.trailing).offset(-50)
        make.height.equalTo(30)
        make.top.equalTo(containerView.snp.top).offset(10)
        })
   

    }
    @objc func tapACtion(){
        if self.containerShowType == .center  {
            hideView()
        }else{
            hideToBomottm()
        }
        
    }

//    MARK:-- 显示
    open func showView(view: UIView){
         view.addSubview(self)
        if self.containerShowType == .center {
            showViewFormCenter()
        }else{
            showFormBotoom()
        }
    }
//    MARK:-- 从中间显示
    private func showViewFormCenter(){
             ////    缩放显示（小-&gt;大）
           self.alpha = 0
           self.containerView.alpha = 0
           containerView.transform = CGAffineTransform.init(scaleX: 0, y: 0)
           UIView.animate(withDuration: 0.25, delay: 0, usingSpringWithDamping: 1.0, initialSpringVelocity: 1, options: .beginFromCurrentState, animations: {
               self.alpha = 1
               self.containerView.alpha = 1
               self.containerView.transform = CGAffineTransform.identity
               
           }) { (isFinshed) in
                self.containerView.transform = CGAffineTransform.init(scaleX: 1, y: 1)
           }
       }

    

//    MARK:-- 显示从底部显示
     private func showFormBotoom(){
        self.alpha = 0
        self.containerView.alpha = 0
        self.containerView.frame = CGRect.init(x: 0, y: SCREEN_HEIGHT, width: SCREEN_WIDTH, height: containerH)
        UIView.animate(withDuration: 0.25, delay: 0, usingSpringWithDamping: 1.0, initialSpringVelocity: 1, options: .beginFromCurrentState, animations: {
            self.alpha = 1
            self.containerView.alpha = 1
            self.containerView.frame = CGRect.init(x: 0, y: SCREEN_HEIGHT-containerH-kBottomSafeAreaHeight, width: SCREEN_WIDTH, height: containerH)
        }) { (isFinshed) in
             self.containerView.frame = CGRect.init(x: 0, y: SCREEN_HEIGHT-containerH-kBottomSafeAreaHeight, width: SCREEN_WIDTH, height: containerH)
        }
    }
    
    //    MARK:-- 隐藏
    open func hideView(){
        self.containerView.alpha = 1
        self.alpha = 1
        containerView.transform = CGAffineTransform.init(scaleX: 1, y: 1)
        UIView.animate(withDuration: 0.25, delay: 0, usingSpringWithDamping: 1.0, initialSpringVelocity: 1, options: .beginFromCurrentState, animations: {
           self.containerView.alpha = 0
           self.alpha = 0
           self.containerView.transform = CGAffineTransform.init(scaleX: 0.5, y: 0.5)
           
        }) { (isFinshed) in
             self.containerView.transform = CGAffineTransform.init(scaleX: 0, y: 0)
              self.removeFromSuperview()
        }
    }
    
   //    MARK:--  向底部消失
    open func hideToBomottm(){
           self.containerView.alpha = 1
           self.alpha = 1
           self.containerView.frame = CGRect.init(x: 0, y: SCREEN_HEIGHT-containerH-kBottomSafeAreaHeight, width: SCREEN_WIDTH, height: containerH)
           UIView.animate(withDuration: 0.25, delay: 0, usingSpringWithDamping: 1.0, initialSpringVelocity: 1, options: .beginFromCurrentState, animations: {
              self.containerView.alpha = 0
              self.alpha = 0
              self.containerView.frame = CGRect.init(x: 0, y: SCREEN_HEIGHT, width: SCREEN_WIDTH, height: containerH)
              
           }) { (isFinshed) in
                self.containerView.frame = CGRect.init(x: 0, y: SCREEN_HEIGHT, width: SCREEN_WIDTH, height: containerH)
                 self.removeFromSuperview()
           }
       }
    /*
    // Only override draw() if you perform custom drawing.
    // An empty implementation adversely affects performance during animation.
    override func draw(_ rect: CGRect) {
        // Drawing code
    }
    */

}

extension CJKTRechargeAlertView: UIGestureRecognizerDelegate{
    override func gestureRecognizerShouldBegin(_ gestureRecognizer: UIGestureRecognizer) -&gt; Bool{
        /**
         //     判断当前点击的位置是否处于 某个view 内
         */
        let point = gestureRecognizer.location(in: self.containerView)
        let isExst:Bool = self.containerView.bounds.contains(point)
        return !isExst
    }
    func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldReceive touch: UITouch) -&gt; Bool {
        /**
         判断某个 view 是否接收手势
         */
//        print("点击的 = \(touch.view.self!)")
        let str =  String(describing: touch.view.self!) as NSString
        if str.isEqual(to: "UITableViewCellContentView") {
            return false
        }
        return true
        
    }
    
}
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>549F7250-97D1-4F33-801A-2BE95415EEBB</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetPlatformFamily</key>
	<string>iphoneos</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>Swift-initCustomAlertView</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
